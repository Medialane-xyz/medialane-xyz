// hooks/use-mobile.ts
'use client'

import { useEffect, useState } from 'react'

export function useMobile() {
  const [isMobile, setIsMobile] = useState(false)

  useEffect(() => {
    if (typeof window === 'undefined') return

    const isIOS =
      /iPad|iPhone|iPod/.test(navigator.userAgent) ||
      (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)

    const mqlMobile = window.matchMedia('(max-width: 767px)')
    const mqlLandscape = window.matchMedia('(orientation: landscape)')

    const update = () => {
      const touchCapable = 'ontouchstart' in window || navigator.maxTouchPoints > 0
      const mobile = mqlMobile.matches || (touchCapable && window.innerWidth < 900)
      setIsMobile(mobile)

      // Set CSS variables for safe-area and bottom nav height
      const root = document.documentElement
      root.style.setProperty('--safe-area-top', 'env(safe-area-inset-top)')
      root.style.setProperty('--safe-area-bottom', 'env(safe-area-inset-bottom)')
      root.style.setProperty('--mobile-nav-height', mobile ? '64px' : '0px')
      // Convenience variable for main bottom padding = mobile nav height + safe area
      root.style.setProperty(
        '--main-bottom-padding',
        `calc(var(--mobile-nav-height) + var(--safe-area-bottom))`
      )
    }

    // rAF throttle to keep it jankâ€‘free on mobile
    const rafThrottle = (fn: () => void) => {
      let running = false
      return () => {
        if (running) return
        running = true
        requestAnimationFrame(() => {
          fn()
          running = false
        })
      }
    }

    const onChange = rafThrottle(update)

    update()
    window.addEventListener('resize', onChange)
    window.addEventListener('orientationchange', onChange)
    mqlMobile.addEventListener?.('change', onChange)
    mqlLandscape.addEventListener?.('change', onChange)

    return () => {
      window.removeEventListener('resize', onChange)
      window.removeEventListener('orientationchange', onChange)
      mqlMobile.removeEventListener?.('change', onChange)
      mqlLandscape.removeEventListener?.('change', onChange)
    }
  }, [])

  return isMobile
}

// app/globals.css
/* Mobile and safe-area helpers */
:root {
  --mobile-nav-height: 0px;
  --safe-area-top: env(safe-area-inset-top);
  --safe-area-bottom: env(safe-area-inset-bottom);
  --main-bottom-padding: calc(var(--mobile-nav-height) + var(--safe-area-bottom));
}

/* Provide safe-area padding utilities */
.pb-mobile-nav {
  padding-bottom: var(--main-bottom-padding);
}
.pt-safe {
  padding-top: var(--safe-area-top);
}
.pb-safe {
  padding-bottom: var(--safe-area-bottom);
}

/* Better touch behavior on mobile */
html, body {
  -webkit-tap-highlight-color: transparent;
  touch-action: manipulation;
  overscroll-behavior-y: none;
}

/* Performance: allow images to skip layout until visible */
img {
  content-visibility: auto;
}

@media (pointer: coarse) {
  button, a, [role="button"] {
    min-height: 44px; /* Comfortable touch targets */
  }
}

@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

// app/layout.tsx
import { Metadata } from 'next'
import { ReactNode } from 'react'

export const metadata: Metadata = {
  viewport: "width=device-width, initial-scale=1, maximum-scale=1, viewport-fit=cover",
}

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        <main className="pb-mobile-nav">{children}</main>
      </body>
    </html>
  )
}

// components/floating-nav.tsx
import React from 'react'
import Button from './button'
import AvatarImage from './avatar-image'

export default function FloatingNav() {
  return (
    <div>
      <header style={{ paddingTop: 'var(--safe-area-top)' }}>
        {/* Header content here */}
      </header>
      <div
        className="fixed bottom-0 left-0 right-0 z-40 glass-effect border-t border-white/10 bg-black/80 backdrop-blur-lg pb-safe"
        style={{ paddingBottom: 'calc(var(--safe-area-bottom))' }}
        role="navigation"
        aria-label="Mobile bottom navigation"
      >
        <Button aria-label="Home">Home</Button>
        <Button aria-label="Explore">Explore</Button>
        <Button aria-label="Create">Create</Button>
        <Button aria-label="Market">Market</Button>
        <Button aria-label="My IP">My IP</Button>
      </div>
    </div>
  )
}

// components/asset-card.tsx
import React from 'react'
import Button from './button'
import AvatarImage from './avatar-image'

export default function AssetCard({ asset }) {
  return (
    <div>
      <img
        src={asset.image || "/placeholder.svg?height=400&width=400"}
        alt={asset.name}
        className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
        loading="lazy"
        decoding="async"
        sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw"
      />
      <AvatarImage src={asset.creatorAvatar || "/placeholder.svg?height=20&width=20"} alt={asset.creator} loading="lazy" decoding="async" />
      <Button aria-label={`View details for ${asset.name}`}>View Details</Button>
    </div>
  )
}

// components/collection-card.tsx
import React from 'react'
import Button from './button'
import AvatarImage from './avatar-image'

export default function CollectionCard({ collection }) {
  return (
    <div>
      <img
        src={collection.banner || "/placeholder.svg"}
        alt={collection.name}
        className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
        loading="lazy"
        decoding="async"
        sizes="100vw"
      />
      <AvatarImage src={collection.image || "/placeholder.svg"} alt={collection.name} loading="lazy" decoding="async" />
      <Button size="sm" aria-label={`View collection ${collection.name}`}>View</Button>
    </div>
  )
}

// app/explore/page.tsx
import React from 'react'
import AssetCard from '../components/asset-card'

export default function ExplorePage({ assets }) {
  return (
    <div>
      {assets.map(asset => (
        <AssetCard key={asset.id} asset={asset}>
          <img
            src={asset.image || "/placeholder.svg?height=192&width=192"}
            alt={asset.name}
            className="h-full w-full object-cover"
            loading="lazy"
            decoding="async"
            sizes="(max-width: 768px) 40vw, 192px"
          />
        </AssetCard>
      ))}
    </div>
  )
}
